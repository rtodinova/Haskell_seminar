-- Simple Sudoku Sover -- 
import Data.Char
import Data.List
import Data.List.Split

-- Базови типове за модела на играта
type Symbol = Char
type Coords = (Int, Int)
type Cell = (Coords, Symbol, [Symbol])
type Grid = [Cell]

-- Полезни константи
mydigits = ['1'..'9']
myrows = [0..8]
mycolumns = [0..8]
mygridcoordinates = [(i, j) | i <- myrows, j <- mycolumns]
mygridsize = length mygridcoordinates


-- Задача 1. Read/Show
-- 1.а. Четене от стринг в нормализиран вид
myread :: String -> Grid
myread str = [ ((i `div` 9, i `mod` 9),c,[]) | (i,c) <- zip [0..] str, c /= '.']

-- 1.б. Връщане на стойността на дадена клетка
myvalue :: Grid -> Coords -> Symbol
myvalue grid crd
	| (not . null) values = head values
	| otherwise = '.'
	    where
	    values = [ v | (crd',v,_) <- grid , crd' == crd]

-- 1.в. Връщане на стринг в нормализиран вид
myshow :: Grid -> String 
myshow grid = [ myvalue grid c | c <- mygridcoordinates]

-- Pretty print: помощна функция за "красиво" изпечатване --
mypretty :: Grid -> String
mypretty grid = unlines $ concat $ intersperse ["------+-------+-------"] $ chunksOf 3 $ map (intercalate " | ") $ chunksOf 3 $ map (intersperse ' ') $ chunksOf 3 $ myshow grid 


-- Задача 2. Намиране на възможните стойности на дадена клетка
-- 2.a. Стойности срещащи се в дадена редица
myrowvals :: Grid -> Coords -> [Symbol]
myrowvals grid (l, _) = [ v | ((l',_) , v , _) <- grid , l' == l]

-- 2.б. Стойности срещащи се в дадена колона
mycolvals :: Grid -> Coords -> [Symbol]
mycolvals grid (_, c) = [ v | ((_,c') , v , _) <- grid , c' == c]

-- 2.в. Индекс на групата на дадена клетка
mygroupid :: Coords -> Coords
mygroupid (l, c) -- = ( l `div` 3, c `div` 3)
	| l>=0 && l<=2 && c>=0 && c<=2  = (0,0)
	| l>=3 && l<=5 && c>=0 && c<=2  = (0,1)
	| l>=6 && l<=8 && c>=0 && c<=2  = (0,2)
	| l>=0 && l<=2 && c>=3 && c<=5  = (1,0)
	| l>=3 && l<=5 && c>=3 && c<=5  = (1,1)
	| l>=6 && l<=8 && c>=3 && c<=5  = (1,2)
	| l>=0 && l<=2 && c>=6 && c<=8  = (2,0)
	| l>=3 && l<=5 && c>=6 && c<=8  = (2,1)
	| l>=6 && l<=8 && c>=6 && c<=8  = (2,2)

-- 2.г. Стойности срещащи се в дадена група
myboxvals :: Grid -> Coords -> [Symbol]
myboxvals grid crd = [ v | (crd',v,_) <- grid, mygroupid crd' == mygroupid crd]

-- 2.е. Възможни стойности за дадена клетка 
mycelloptions :: Grid -> Coords -> [Symbol]
mycelloptions grid crd = undefined


-- Задача 3. Намиране на най-добър кандидат
-- 3.а. Намиране на решените клетки
mysolved :: Grid -> [Coords]
mysolved grid = undefined

-- 3.б. Намиране на нерешените клетки
myunsolved :: Grid -> [Coords]
myunsolved grid = undefined

-- 3.в. Намиране на най-добрият кандидат (нерешената клетка с най-малко възможни стойности)
mybestcandidate :: Grid -> (Coords, [Symbol])
mybestcandidate grid = undefined

-- Задача 4. Решаване на пъзела
mysolve :: Grid -> Grid
mysolve grid = undefined

-- backtracking
mybacktrack :: Grid -> Grid
mybacktrack = undefined


-- Тест: Примерно судоку
main :: IO()
main = let
        example = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."
        grid = myread example
    in do
        putStrLn $ mypretty grid
        putStrLn $ mypretty $ mysolve grid
